// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
    USER
    ADMIN
}

model User {
  id              Int          @id @default(autoincrement())
  firstName       String       @map("first_name")
  lastName        String       @map("last_name")
  username        String    
  password        String    
  email           String?
  phone           String       @map("phone")
  address         Address[]
  cart            Cart[]
  order           Order[]
}

model Address {
  address_id      Int          @id @default(autoincrement())
  user_id         Int          @map("user_id")
  user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressline1    String
  addressline2    String
  city            String
}

model Product {
  product_id      Int          @id @default(autoincrement())
  bekery_id       Int
  productName     String
  price           Float
  bekery          Bekery       @relation(fields: [bekery_id], references: [bekery_id], onDelete: Cascade, onUpdate: Cascade)
  cart            Cart[]    
  orderDetail     OrderDetail[]

}

model Cart {
  cart_id         Int          @id @default(autoincrement())
  user_id         Int          @map("user_id")
  product_id      Int       
  quantity        Int
  user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)  
  product         Product      @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  order_id        Int          @id @default(autoincrement())
  user_id         Int          @map("user_id")
  totalamount     Float
  orderdate       DateTime
  user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payment         Payment[] 
  orderdetail     OrderDetail[]
}

model Payment {
  payment_id      Int          @id @default(autoincrement())
  order_id        Int
  paymentmethod   String
  amount          Float
  order           Order        @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: Cascade)
}

model OrderDetail {
  orderdetail_id  Int          @id @default(autoincrement())
  order_id        Int
  product_id      Int
  quantity        Int
  subtotal        Float
  order           Order        @relation(fields: [order_id], references: [order_id], onDelete: Cascade, onUpdate: Cascade)
  product         Product      @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
}

model Bekery {
  bekery_id       Int          @id @default(autoincrement())
  image_bekery    String
  bekeryname      String
  description     String
  product         Product[] 
}



